import type { TypescriptRules } from "./types.js";

export const tseslintRules: TypescriptRules = {
  "@typescript-eslint/adjacent-overload-signatures": "warn",
  "@typescript-eslint/array-type": "warn",
  "@typescript-eslint/await-thenable": "warn",
  "@typescript-eslint/ban-ts-comment": [
    "warn",
    { minimumDescriptionLength: 10 },
  ],
  "@typescript-eslint/ban-tslint-comment": "warn",
  "@typescript-eslint/class-literal-property-style": "warn",
  "@typescript-eslint/consistent-generic-constructors": "warn",
  "@typescript-eslint/consistent-indexed-object-style": "warn",
  "@typescript-eslint/consistent-type-assertions": "warn",
  "@typescript-eslint/consistent-type-definitions": "warn",
  "@typescript-eslint/consistent-type-exports": [
    "warn",
    { fixMixedExportsWithInlineTypeSpecifier: true },
  ],
  "@typescript-eslint/consistent-type-imports": [
    "warn",
    {
      fixStyle: "inline-type-imports",
      prefer: "type-imports",
    },
  ],
  "@typescript-eslint/dot-notation": "warn",
  "@typescript-eslint/no-array-constructor": "warn",
  "@typescript-eslint/no-array-delete": "warn",
  "@typescript-eslint/no-base-to-string": "warn",
  "@typescript-eslint/no-confusing-non-null-assertion": "warn",
  "@typescript-eslint/no-confusing-void-expression": "warn",
  "@typescript-eslint/no-deprecated": "warn",
  "@typescript-eslint/no-duplicate-enum-values": "warn",
  "@typescript-eslint/no-duplicate-type-constituents": "warn",
  "@typescript-eslint/no-dynamic-delete": "warn",
  "@typescript-eslint/no-empty-function": "warn",
  "@typescript-eslint/no-empty-object-type": "warn",
  "@typescript-eslint/no-explicit-any": "warn",
  "@typescript-eslint/no-extra-non-null-assertion": "warn",
  "@typescript-eslint/no-extraneous-class": "warn",
  "@typescript-eslint/no-floating-promises": "warn",
  "@typescript-eslint/no-for-in-array": "warn",
  "@typescript-eslint/no-implied-eval": "warn",
  "@typescript-eslint/no-import-type-side-effects": "warn",
  "@typescript-eslint/no-inferrable-types": "warn",
  "@typescript-eslint/no-invalid-void-type": "warn",
  "@typescript-eslint/no-meaningless-void-operator": "warn",
  "@typescript-eslint/no-misused-new": "warn",
  "@typescript-eslint/no-misused-promises": "warn",
  "@typescript-eslint/no-mixed-enums": "warn",
  "@typescript-eslint/no-namespace": "warn",
  "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "warn",
  "@typescript-eslint/no-non-null-asserted-optional-chain": "warn",
  "@typescript-eslint/no-non-null-assertion": "warn",
  "@typescript-eslint/no-redundant-type-constituents": "warn",
  "@typescript-eslint/no-require-imports": "warn",
  "@typescript-eslint/no-this-alias": "warn",
  "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
  "@typescript-eslint/no-unnecessary-condition": "warn",
  "@typescript-eslint/no-unnecessary-template-expression": "warn",
  "@typescript-eslint/no-unnecessary-type-arguments": "warn",
  "@typescript-eslint/no-unnecessary-type-assertion": "warn",
  "@typescript-eslint/no-unnecessary-type-constraint": "warn",
  "@typescript-eslint/no-unnecessary-type-parameters": "warn",
  "@typescript-eslint/no-unsafe-declaration-merging": "warn",
  "@typescript-eslint/no-unsafe-enum-comparison": "warn",
  "@typescript-eslint/no-unsafe-function-type": "warn",
  "@typescript-eslint/no-unsafe-unary-minus": "warn",
  "@typescript-eslint/no-unused-expressions": "warn",
  "@typescript-eslint/no-unused-vars": [
    "warn",
    {
      args: "after-used",
      argsIgnorePattern: "^_",
      ignoreRestSiblings: false,
      vars: "all",
      varsIgnorePattern: "^_",
    },
  ],
  "@typescript-eslint/no-useless-constructor": "warn",
  "@typescript-eslint/no-wrapper-object-types": "warn",
  // TODO: Investiate non-null vs type-cast rules
  "@typescript-eslint/non-nullable-type-assertion-style": "off",
  "@typescript-eslint/only-throw-error": "warn",
  "@typescript-eslint/prefer-as-const": "warn",
  "@typescript-eslint/prefer-find": "warn",
  "@typescript-eslint/prefer-for-of": "warn",
  "@typescript-eslint/prefer-function-type": "warn",
  "@typescript-eslint/prefer-includes": "warn",
  "@typescript-eslint/prefer-literal-enum-member": "warn",
  "@typescript-eslint/prefer-namespace-keyword": "warn",
  "@typescript-eslint/prefer-nullish-coalescing": "warn",
  "@typescript-eslint/prefer-optional-chain": "warn",
  "@typescript-eslint/prefer-promise-reject-errors": "warn",
  "@typescript-eslint/prefer-reduce-type-parameter": "warn",
  "@typescript-eslint/prefer-regexp-exec": "warn",
  "@typescript-eslint/prefer-return-this-type": "warn",
  "@typescript-eslint/prefer-string-starts-ends-with": "warn",
  "@typescript-eslint/related-getter-setter-pairs": "warn",
  "@typescript-eslint/require-await": "warn",
  "@typescript-eslint/restrict-plus-operands": [
    "warn",
    {
      allowAny: false,
      allowBoolean: false,
      allowNullish: false,
      allowNumberAndString: false,
      allowRegExp: false,
    },
  ],
  "@typescript-eslint/restrict-template-expressions": [
    "warn",
    {
      allow: [{ from: "lib", name: ["Error", "URL", "URLSearchParams"] }],
      allowAny: true,
      allowBoolean: true,
      allowNullish: true,
      allowNumber: true,
      allowRegExp: true,
    },
  ],
  "@typescript-eslint/return-await": [
    "warn",
    "error-handling-correctness-only",
  ],
  "@typescript-eslint/triple-slash-reference": "warn",
  "@typescript-eslint/unbound-method": "warn",
  "@typescript-eslint/unified-signatures": "warn",
  "@typescript-eslint/use-unknown-in-catch-callback-variable": "warn",
};
