name: Release

on:
  push:
    branches: ["main"]

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: "package.json"

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install global Turbo
        run: bun add --global turbo@^2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Save cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/bun.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-${{ hashFiles('**/bun.lock') }}-
            ${{ runner.os }}-turbo-

      - name: Build
        run: turbo run build

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: bun changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.changesets.outputs.published == 'true'
        run: |
          for pkg in $(echo '${{ toJSON(steps.changesets.outputs.publishedPackages) }}' | jq -r '.[] | @base64'); do
            pkg_decoded=$(echo $pkg | base64 --decode)
            pkg_name=$(echo $pkg_decoded | jq -r '.name')
            pkg_version=$(echo $pkg_decoded | jq -r '.version')
            
            # Skip creating a GitHub release if one already exists with this tag
            if ! gh release view $pkg_version &>/dev/null; then
              gh release create $pkg_version \
                --title "$pkg_name@$pkg_version" \
                --notes "$(cat .changeset/*.md)" \
                --draft=false
            else
              echo "Release $pkg_version already exists, skipping"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
